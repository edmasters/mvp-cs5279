{"ast":null,"code":"export const handleMortgageDataChange = (amountToBorrow, mortgageTerm, interestRate, monthlyPayment) => {\n  //Set initial values for loop to calculate yearly figures\n  let yearDataObject = [{\n    year: 0,\n    outstandingBalance: amountToBorrow,\n    interestPaid: 0,\n    interestPaidToDate: 0,\n    principalRepaid: 0,\n    principalRepaidToDate: 0\n  }];\n  let outstandingBalance = amountToBorrow;\n  let interestPaidToDate = 0;\n  let principalRepaidToDate = 0; //Loop each year of the mortgage term\n\n  for (let i = 1; i <= mortgageTerm; i++) {\n    let monthInterestPaid = 0;\n    let interestPaidMonthlyToYearlyIncrementer = 0;\n    let monthPrincipalPaid = 0;\n    let monthlyPrincipalRepaidToYearlyIncrementer = 0; //loop each month of the year as interest is calculated monthly\n\n    for (let j = 0; j < 12; j++) {\n      monthInterestPaid = outstandingBalance * interestRate / 100 / 12;\n      interestPaidMonthlyToYearlyIncrementer = interestPaidMonthlyToYearlyIncrementer + monthInterestPaid;\n      monthPrincipalPaid = monthlyPayment - monthInterestPaid;\n      monthlyPrincipalRepaidToYearlyIncrementer = monthlyPrincipalRepaidToYearlyIncrementer + monthPrincipalPaid;\n      outstandingBalance = outstandingBalance - monthPrincipalPaid;\n    }\n\n    interestPaidToDate = interestPaidToDate + interestPaidMonthlyToYearlyIncrementer;\n    principalRepaidToDate = principalRepaidToDate + monthlyPrincipalRepaidToYearlyIncrementer; //There's always around £10 left at the end which forces the fraph to go into minus. This just rounds the last figure off at £0.00.\n\n    if (i === mortgageTerm) {\n      outstandingBalance = 0;\n    }\n\n    yearDataObject.push({\n      year: i,\n      outstandingBalance: parseFloat(outstandingBalance.toFixed(2)),\n      interestPaid: parseFloat(interestPaidMonthlyToYearlyIncrementer.toFixed(2)),\n      interestPaidToDate: parseFloat(interestPaidToDate.toFixed(2)),\n      principalRepaid: parseFloat(monthlyPrincipalRepaidToYearlyIncrementer.toFixed(2)),\n      principalRepaidToDate: parseFloat(principalRepaidToDate.toFixed(2))\n    });\n  }\n\n  return yearDataObject;\n};","map":{"version":3,"sources":["/Users/emasterson 1/Desktop/mvp-cs5279/src/components/utils.js"],"names":["handleMortgageDataChange","amountToBorrow","mortgageTerm","interestRate","monthlyPayment","yearDataObject","year","outstandingBalance","interestPaid","interestPaidToDate","principalRepaid","principalRepaidToDate","i","monthInterestPaid","interestPaidMonthlyToYearlyIncrementer","monthPrincipalPaid","monthlyPrincipalRepaidToYearlyIncrementer","j","push","parseFloat","toFixed"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAG,CAACC,cAAD,EAAiBC,YAAjB,EAA+BC,YAA/B,EAA6CC,cAA7C,KAAgE;AAEpG;AACA,MAAIC,cAAc,GAAG,CAAC;AAClBC,IAAAA,IAAI,EAAE,CADY;AAElBC,IAAAA,kBAAkB,EAAEN,cAFF;AAGlBO,IAAAA,YAAY,EAAE,CAHI;AAIlBC,IAAAA,kBAAkB,EAAE,CAJF;AAKlBC,IAAAA,eAAe,EAAE,CALC;AAMlBC,IAAAA,qBAAqB,EAAE;AANL,GAAD,CAArB;AAQA,MAAIJ,kBAAkB,GAAGN,cAAzB;AACA,MAAIQ,kBAAkB,GAAG,CAAzB;AACA,MAAIE,qBAAqB,GAAG,CAA5B,CAboG,CAepG;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIV,YAApB,EAAkCU,CAAC,EAAnC,EAAuC;AAEnC,QAAIC,iBAAiB,GAAG,CAAxB;AACA,QAAIC,sCAAsC,GAAG,CAA7C;AACA,QAAIC,kBAAkB,GAAG,CAAzB;AACA,QAAIC,yCAAyC,GAAG,CAAhD,CALmC,CAOnC;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBJ,MAAAA,iBAAiB,GAAGN,kBAAkB,GAAGJ,YAArB,GAAoC,GAApC,GAA0C,EAA9D;AACAW,MAAAA,sCAAsC,GAAGA,sCAAsC,GAAGD,iBAAlF;AACAE,MAAAA,kBAAkB,GAAGX,cAAc,GAAGS,iBAAtC;AACAG,MAAAA,yCAAyC,GAAGA,yCAAyC,GAAGD,kBAAxF;AACAR,MAAAA,kBAAkB,GAAGA,kBAAkB,GAAGQ,kBAA1C;AACH;;AAEDN,IAAAA,kBAAkB,GAAGA,kBAAkB,GAAGK,sCAA1C;AACAH,IAAAA,qBAAqB,GAAGA,qBAAqB,GAAGK,yCAAhD,CAjBmC,CAmBnC;;AACA,QAAGJ,CAAC,KAAKV,YAAT,EAAuB;AACnBK,MAAAA,kBAAkB,GAAG,CAArB;AACH;;AAEDF,IAAAA,cAAc,CAACa,IAAf,CAAoB;AAChBZ,MAAAA,IAAI,EAAEM,CADU;AAEhBL,MAAAA,kBAAkB,EAAEY,UAAU,CAACZ,kBAAkB,CAACa,OAAnB,CAA2B,CAA3B,CAAD,CAFd;AAGhBZ,MAAAA,YAAY,EAAEW,UAAU,CAACL,sCAAsC,CAACM,OAAvC,CAA+C,CAA/C,CAAD,CAHR;AAIhBX,MAAAA,kBAAkB,EAAEU,UAAU,CAACV,kBAAkB,CAACW,OAAnB,CAA2B,CAA3B,CAAD,CAJd;AAKhBV,MAAAA,eAAe,EAAES,UAAU,CAACH,yCAAyC,CAACI,OAA1C,CAAkD,CAAlD,CAAD,CALX;AAMhBT,MAAAA,qBAAqB,EAAEQ,UAAU,CAACR,qBAAqB,CAACS,OAAtB,CAA8B,CAA9B,CAAD;AANjB,KAApB;AAQH;;AACD,SAAOf,cAAP;AACH,CAlDM","sourcesContent":["export const handleMortgageDataChange = (amountToBorrow, mortgageTerm, interestRate, monthlyPayment) => {\n\n    //Set initial values for loop to calculate yearly figures\n    let yearDataObject = [{\n        year: 0,\n        outstandingBalance: amountToBorrow,\n        interestPaid: 0,\n        interestPaidToDate: 0,\n        principalRepaid: 0,\n        principalRepaidToDate: 0\n    }];\n    let outstandingBalance = amountToBorrow;\n    let interestPaidToDate = 0;\n    let principalRepaidToDate = 0;\n\n    //Loop each year of the mortgage term\n    for(let i = 1; i <= mortgageTerm; i++) {\n\n        let monthInterestPaid = 0;\n        let interestPaidMonthlyToYearlyIncrementer = 0;\n        let monthPrincipalPaid = 0;\n        let monthlyPrincipalRepaidToYearlyIncrementer = 0;\n\n        //loop each month of the year as interest is calculated monthly\n        for(let j = 0; j < 12; j++) {\n            monthInterestPaid = outstandingBalance * interestRate / 100 / 12;\n            interestPaidMonthlyToYearlyIncrementer = interestPaidMonthlyToYearlyIncrementer + monthInterestPaid;\n            monthPrincipalPaid = monthlyPayment - monthInterestPaid;\n            monthlyPrincipalRepaidToYearlyIncrementer = monthlyPrincipalRepaidToYearlyIncrementer + monthPrincipalPaid;\n            outstandingBalance = outstandingBalance - monthPrincipalPaid;\n        }\n\n        interestPaidToDate = interestPaidToDate + interestPaidMonthlyToYearlyIncrementer;\n        principalRepaidToDate = principalRepaidToDate + monthlyPrincipalRepaidToYearlyIncrementer;\n\n        //There's always around £10 left at the end which forces the fraph to go into minus. This just rounds the last figure off at £0.00.\n        if(i === mortgageTerm) {\n            outstandingBalance = 0;\n        }\n\n        yearDataObject.push({\n            year: i,\n            outstandingBalance: parseFloat(outstandingBalance.toFixed(2)),\n            interestPaid: parseFloat(interestPaidMonthlyToYearlyIncrementer.toFixed(2)),\n            interestPaidToDate: parseFloat(interestPaidToDate.toFixed(2)),\n            principalRepaid: parseFloat(monthlyPrincipalRepaidToYearlyIncrementer.toFixed(2)),\n            principalRepaidToDate: parseFloat(principalRepaidToDate.toFixed(2))\n        });\t\n    }\n    return yearDataObject\n}"]},"metadata":{},"sourceType":"module"}